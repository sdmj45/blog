{"pages":[],"posts":[{"title":"GCP-Kubernetes-Manually","text":"In this article, we will show you how to deploy a web application by kubernetes on gcp. run nginx on daemon1docker run -d -p 8080:80 nginx:latest change index.html in nginx container1docker cp index.html 607de9f58775:/usr/share/nginx/html/ create docker image from the new container version1docker commit 607de9f58775 daccfrance:version1 create tag of docker image with project id1docker tag daccfrance:version1 eu.gcr.io/kube-test-286917/daccfrance:version1 push docker image to gcp container registry1docker push eu.gcr.io/kube-test-286917/daccfrance:version1 kill docker container1docker container kill #container_id set compute zone by default1gcloud config set compute/zone europe-west1-b create a kubernetes cluster1gcloud container clusters create gk-cluster --num-nodes=1 get authentication credentials for the cluster1gcloud container clusters get-credentials gk-cluster create kubernetes deployment1kubectl create deployment web-server --image=eu.gcr.io/kube-test-286917/daccfrance:version1 create kubernetes service1kubectl expose deployment web-server --type LoadBalancer --port 80 --target-port 80 get kubernetes pods1kubectl get pods get kubernetes service1kubectl get service web-server","link":"/blog/2020/08/20/GCP-Kubernetes-Manually/"},{"title":"My First Blog","text":"The first time I tried to write a blog, this is a start. . . My BlogWhy to write blog2018 is coming soon. I think that I came to France alone in 2009 and came to this country where everything is strange. Now I have not seen it for more than 8 years. During this period, I went to school, graduated, and found a job. Later, in love, marriage, childbirth, and embarrassment, there have been five or six years of experience in the world of programmers. I really want to leave something for my life, even if I want to make a simple record, I also want to communicate with my friends, and I have some experience in life. However, my writing is really a dish, and I haven’t written it for many years. There is no way, I can only bite my head. Seeing a summary of a peer on the Internet feels very good, use it to borrow, as an original intention of a personal blog. Accumulate Accumulate experience in work and gain in life. Record Use the blog as a diary to record what you see and hear in your work life. Share As a programmer, you must have an “open source” spirit. Communication Blog is a big circle. Learning I always learn knowledge here, just like reading it every day. Blog’s content Tell the world of programmers and reprint some technically and nutritious articles. Some stories about living abroad Ok, the first blog is simply recorded here, my blog journey starts here!","link":"/blog/2019/03/08/First%20blog/"},{"title":"Git Commands","text":"Git modify historyWe have 3 old commits pushed as following, we want to modify them and squash the last 2 commits command: 1git rebase -i HEAD~3 we got: Change the last 2 commits to squash 12Ech:wq Comment the last 2 commit messages 12Ech:wq 1git push -f And we can find that the commit history have been changed","link":"/blog/2021/08/09/Git-Commands/"},{"title":"Avro vs Parquet","text":"AvroApache Avro is a remote procedure call and data serialization framework developed with Apache Hadoop project. It uses Json for defining data types and protocols and serialize data in compact binary format.Avro stores both schema and data together in one message or file.A key feature of Avro is robust support for data schemas that change over time, called scheam evolution. Avro Row based format Schema is stored as JSON within the file It is also a Serialization and RPC framework Files support block compression and are splittable Can be written from streaming data (eg Apache Kafka) Excellent with schema evolution ParquetParquet is a columnar file format that provides optimizations to speed up queries and a far more efficient file format than csv or json Parquet Column based format Schema is stored in the footer of the file Due to merging of schema across multiple files, schema evolution is expensive Excellent for selected column data consumption and processing Can’t be written from streaming data since it needs to wait for blocks to get finished. However, this will work using micro-batch (eg Apache Spark). Working excellent with spark as there is vectorized reader for parquet","link":"/blog/2019/04/17/Avro-vs-Parquet/"},{"title":"Jenkins multiple pipelines","text":"Jenkins architecture is fundamentally “Master + Agent”, the master is designed to do the co-ordination and provide the GUI and API endpoint, and the Agents are designed to execute the work. Jenkins can run on distributed mode, this may be for scale or to provide different tools and we can launch jenkins en multiple pipelines simultaneously, it can work on parallel Here I will show an example how to install multiple agents to a Jenkins master. In my example, I use docker to install Jenkins master and vagrant to install two machines as agents. Create agent machines by vagrantI created 2 machines by vagrant with the Vagrantfile as below, you can go the directory of this file and run the command : 12vagrant up [Vagrantfile] Run master via docker12docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts copy the password to the interface of jenkins, configure user information, install the plugins recommended and then we can access to jenkins home page Add agentgo to Manage Jenkins/Manage Nodes and click “New Node” button, we give a Node name and check Permanent Agent SSH connexionIn the first example, we will add an agent via SSH:Before doing that, I generated the ssh key inside of docker container, and copy id_rsa.pub to ~/.ssh/known_hosts in agent 12ssh-keygen -t rsa -b 4096 -C \"sdmj45@gmail.com\" Labels: group name of the agentHost: agent ipCredentials: configure credential as below, we give the username as vagrant and private key generated in docker container Launch agent:We can click Launch agent button to launch Agent Java Web Start connexionIn the second example, we will add an agent via Java Web Start: Labels: group name of the agent Launch agent:We can launch agent by “Run from agent command line”: copy the agent.jar to agent machine and run the command by changing localhost:8080 to host_ip:8080 Multiple pipeline buildI add a new build of test and execute a simple command, I added “sleep 30” in order to keep some time in the building 123echo \"hello slave\"sleep 30echo \"bye slave\" and then I can launch multiple pipeline build as follow (as there are 2 executors in each agent, I can launch 4 build simultaneously)","link":"/blog/2019/05/03/Jenkins-multiple-pipelines/"},{"title":"Kubernetes Deploy Example - Part 1","text":"Kubernetes is a container orchestration system for automating application deployment, scaling and management. Here we will show a simple example of nginx deployment by kubernetes. Requirements install kubernetes, for me, I use minikube install docker Step 1: Pull the image from Docker Registry12$ kubectl run nginx --image=nginx:latest --port=80 Step 2: Check if deployment ok12345$ kubectl get podsNAME READY STATUS RESTARTS AGEnginx-6bfb654d7c-xjvhg 1/1 Running 0 1h Step 3: Expose service through NodePortAs I use minikube in local, I don’t have LoadBalancer installed, so I use NodePort as type here 1234kubectl expose deployment nginx --type=NodePort --port=80 --target-port=80service \"nginx\" exposed Step 4: Get service port12345kubectl get svc nginxNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEnginx NodePort 10.109.174.66 &lt;none&gt; 80:32598/TCP 45m Here we can find that the service if exposed by port 32598 Step 5: Get kubernetes ip12345kubectl get endpoints kubernetesNAME ENDPOINTS AGEkubernetes 192.168.99.100:8443 143d Step 6: Access to nginxOpen your navigator and type the url of kubernetes with the port of nginx, you will access to welcome page of nginx 12http://192.168.99.100:32598","link":"/blog/2019/04/26/Kubernetes-Deploy-Example-Part-1/"},{"title":"Hive vs Presto","text":"PrestoPresto is a distributed SQL query engine for big data, it allows users to query a variety of data sources such as Hadoop, RDBMS, Mongo etc. One can even query data from multiple data sources within a single query. HiveHive is a data warehouse software built on top of Apache Hadoop for providing data query and analysis. It translates SQL queries into multiple stages of MapReduce and it is powerful enough to handle huge numbers of jobs Comparisons Tables Presto Hive best of use Interactive queries Large data aggregation(join for example) sql standardized fidelity ANSI SQL HiveQL window function yes yes optimized target latency query throughput execution mode Intermediate data in memory Spills intermediate data to File System fault tolerance No Yes speed 2 times faster than hive slow data processing models push model pull model limitation limited at the maximum amount of memory that each task can store","link":"/blog/2019/05/13/Hive-vs-Presto/"},{"title":"Kubernetes Deploy Example - Part 2","text":"This is part 2 of Kubernetes Deploy Example, in this example, we will use the yaml file to deploy a nginx. In this example, we have combined the Deployment part and the Service part together. We could deploy them at the same time. 12345678910111213141516171819202122232425262728293031323334apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2 kind: Deployment metadata: name: nginx-deployment spec: selector: matchLabels: app: nginx replicas: 2 # tells deployment to run 2 pods matching the template template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80 --- # https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service kind: Service apiVersion: v1 metadata: name: nginx-service spec: selector: app: nginx ports: - protocol: TCP port: 80 targetPort: 80 nodePort: 32000 type: NodePort Step 1: Apply applications with yaml file123kubectl apply -f ./deployment.yamldeployment.apps \"nginx-deployment\" createdservice \"nginx-service\" created Step 2: Get kubernetes ip12345kubectl get endpoints kubernetesNAME ENDPOINTS AGEkubernetes 192.168.99.100:8443 143d Step 3: Access to nginxOpen your navigator and type the url of kubernetes with the port of nginx(we defined 32000 in the yaml file), you will access to welcome page of nginx 12http://192.168.99.100:32000","link":"/blog/2019/04/26/Kubernetes-Deploy-Example-Part-2/"},{"title":"Python-a01-How to install embedded python on windows","text":"install an embedded python on Windows download zip file from https://www.python.org/downloads/windows/, unzip it and add it to the path environment variable download get-pip.py from https://bootstrap.pypa.io/get-pip.py run command 1python get-pip.py add pip path to the path in environment variable when running pip -V there is errorModuleNotFoundError: No module named ‘pip’ In order to fix this, we have to do as below: open python38._pth and add the following paths to it 123C:\\Dev\\softwares\\python-3.8.0-embed-amd64\\ScriptsC:\\Dev\\softwares\\python-3.8.0-embed-amd64\\LibC:\\Dev\\softwares\\python-3.8.0-embed-amd64\\Lib\\site-packages","link":"/blog/2021/01/11/Python-a01-How-to-install-embedded-python-on-windows/"},{"title":"Python-a02-String","text":"This article shows the examples of String in python 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 1 message1 = 'Hello World' print(message1)# 2 message2 = \"hello 'Jimmy'\" print(message2) # 3 message3 = 'Hello World' print(len(message3)) # 4 message4 = 'Hello World' print(message4[1]) print(message4[-1]) print(message4[0:5]) # first include, second not print(message4[:5]) # end to the 5 print(message4[6:]) # start from the 6 print(message4[11]) # error# 5 message5 = 'Hello World' print(message5.lower()) print(message5.upper()) print(message5.count('l')) # count l's number in the message print(message5.find('World')) # return 6 print(message5.find('Unknown')) # return -1# 6 message6 = 'Hello World' # or by the same message6 = message6.replace('World', 'You') new_message6 = message6.replace('World', 'You') print(new_message6) # 7 greeting='Hello' name='Bob' message7 = greeting + ', ' + name print(message7) message8 = '{}, {}. Welcome!'.format(greeting, name) print(message8) message9 = f'{greeting}, {name}. Welcome!' # python &gt;3.10 print(message9) message10 = f'{greeting}, {name.upper()}. Welcome!' # python &gt;3.10 print(message10) # 8 print(help(str)) print(help(str.lower))","link":"/blog/2021/01/14/Python-a02-String/"},{"title":"Python-a03-Numeric","text":"This article shows the examples of Float, Integer in python 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# different types num1 = 4 print(type(num1)) num2 = 2.1 print(type(num2)) # arithmetic operators print(5 + 2) print(5 - 2) print(5 * 2) print(5 / 2) print(5 // 2) # floor division print(3 ** 2) # exponent print(3 % 2) # modulus print(abs(-3)) # absolute print(round(3.6)) # round number 4 print(round(3.75, 1)) # round number 3.8 # calculation order print(3 + 2 * 2) print((3+2)*2) # increment num1 = 1 num1 = num1 + 1 print(num1) num2 = 1 num2 += 1 print(num2)# comparisons print(3 == 2) # equal print(3 != 2) # not equal print(3 &gt; 2) # greater than print(3 &lt; 2) # less than print(3 &gt;= 2) # greater or equal print(3 &lt;= 2) # less or equal# cast num1 = '10' num2 = '20' print(num1 + num2) # 1020 num3 = int(num1) num4 = int(num2) print(num3 + num4) # 30","link":"/blog/2021/01/15/Python-a03-Numeric/"},{"title":"Python-a04-List,Tuple,Set","text":"This article shows the examples of List, Tuple, Set in python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139## List # List basics courses = ['History', 'Math', 'Physics', 'CompSci'] print(courses) print(len(courses)) print(courses[0]) print(courses[-1]) # start from the end print(courses[4]) # error print(courses[0:2]) # the first index include, not the second one print(courses[:2]) # from the first to index 2 print(courses[2:]) # from index 2 to the end# Add elements to List courses1 = ['History', 'Math', 'Physics', 'CompSci'] courses1.append('Art') print(courses1) # ['History', 'Math', 'Physics', 'CompSci', 'Art'] courses2 = ['History', 'Math', 'Physics', 'CompSci'] courses2.insert(0, 'Art') print(courses2) # ['Art', 'History', 'Math', 'Physics', 'CompSci'] courses3 = ['History', 'Math', 'Physics', 'CompSci'] courses4 = ['Art', 'Education'] courses3.insert(0, courses4) print(courses3) # [['Art', 'Education'], 'History', 'Math', 'Physics', 'CompSci'] courses5 = ['History', 'Math', 'Physics', 'CompSci'] courses6 = ['Art', 'Education'] courses5.extend(courses6) print(courses5) # ['History', 'Math', 'Physics', 'CompSci', 'Art', 'Education'] # Remove elements to List courses = ['History', 'Math', 'Physics', 'CompSci'] courses.remove('Math') print(courses) #['History', 'Physics', 'CompSci'] courses1 = ['History', 'Math', 'Physics', 'CompSci'] courses.pop() print(courses) #['History', 'Math', 'Physics'] courses2 = ['History', 'Math', 'Physics', 'CompSci'] popped = courses.pop() print(popped) #'CompSci' # Order in List courses = ['History', 'Math', 'Physics', 'CompSci'] courses.reverse() print(courses) #['CompSci', 'Physics', 'Math', 'History'] courses1 = ['History', 'Math', 'Physics', 'CompSci'] courses1.sort() print(courses1) #['CompSci', 'History', 'Math', 'Physics'] courses2 = ['History', 'Math', 'Physics', 'CompSci'] courses2.sort(reverse=True) print(courses2) #['Physics', 'Math', 'History', 'CompSci'] courses3 = ['History', 'Math', 'Physics', 'CompSci'] courses4 = sorted(courses3) print(courses4) #['CompSci', 'History', 'Math', 'Physics'] # Min, Max, Sum in List nums = [1,5,2,4,3] print(min(nums)) #1 print(max(nums)) #5 print(sum(nums)) #15 # index in List courses = ['History', 'Math', 'Physics', 'CompSci'] print(courses.index('ComSci')) # 3 print(courses.index('Art')) # error print('Art' in courses) # False print('Math' in courses) # True for item in courses: print(item) # History Math Physics CompSci for index, course in enumerate(courses): print(index, course) # 0 History 1 Math 2 Physics 3 CompSci for index, course in enumerate(courses, start=1): print(index, course) # 1 History 2 Math 3 Physics 4 CompSci # join in List courses = ['History', 'Math', 'Physics', 'CompSci'] course_str = ', '.join(courses) new_courses = course_str.split(', ') print(course_str) # 'History', 'Math', 'Physics', 'CompSci' print(new_courses) # ['History', 'Math', 'Physics', 'CompSci'] ## Tuple# List is mutable, Tuple is immnutable, we can't add, append, modify element in Tuple list1 = ['History', 'Math', 'Physics', 'CompSci'] list2 = list1 print(list1) #['History', 'Math', 'Physics', 'CompSci'] print(list2) #['History', 'Math', 'Physics', 'CompSci'] list1[0] = 'Art' print(list1) #['Art', 'Math', 'Physics', 'CompSci'] print(list2) #['Art', 'Math', 'Physics', 'CompSci'] tuple1 = ('History', 'Math', 'Physics', 'CompSci') tuple2 = tuple1 print(tuple1) #('History', 'Math', 'Physics', 'CompSci') print(tuple2) #('History', 'Math', 'Physics', 'CompSci') tuple1[0] = 'Art' # error ## Set# Set values are unordered and unduplicated set1 = {'History', 'Math', 'Physics', 'CompSci'} print(set1) #{'Math', 'History', 'Physics', 'CompSci'} order may change set2 = {'History', 'Math', 'Physics', 'CompSci', 'Math'} print(set2) #{'Math', 'History', 'Physics', 'CompSci'} order may change set3 = {'History', 'Math', 'Physics', 'CompSci'} print('Math' in set3) #True Set is optimized for the check existing # Set is optimized to find the same and differences between 2 ones set4 = {'History', 'Math', 'Physics', 'CompSci'} set5 = {'History', 'Math', 'Art', 'Design'} print(set4.intersaction(set5)) #{'History', 'Math'} print(set4.difference(set5)) #{'Physics', 'CompSci'} print(set4.union(set5)) #{'History', 'Math', 'Physics', 'CompSci', 'Art', 'Design'} ## How to create empty List, Tuple, Set empty_list = [] empty_list = list() empty_tuple = () empty_tuple = tuple() empty_set = {} # This is wrong, it's a dict empty_set = set()","link":"/blog/2021/01/17/Python-a04-List-Tuple-Set/"},{"title":"Python-a05-Dictionaries","text":"This article shows the examples of Dictionaries in python 12345678910111213141516171819202122232425262728293031323334353637383940## basic student = {'name': 'John', 'age': 25, 'courses': ['Math', 'CompSci']} print(student) # {'name': 'John', 'age': 25, 'courses': ['Math', 'CompSci']} print(student['name']) # John print(student['courses'][0]) # Math print(student['phone']) # error print(student.get('name')) # John print(student.get('phone')) # None print(student.get('phone', 'Not Found')) # Not Found # add and update element student['phone'] = '555' student['name'] = 'Bob' print(student) # {'name': 'Bob', 'phone': '555', 'age': 25, 'courses': ['Math', 'CompSci']} student.update({'name': 'Jane', 'age': 26, 'phone': '666'}) print(student) # {'name': 'Jane', 'phone': '666', 'age': 26, 'courses': ['Math', 'CompSci']}# delete element student = {'name': 'John', 'age': 25, 'courses': ['Math', 'CompSci']} del student['age'] print(student) # {'name': 'John', 'courses': ['Math', 'CompSci']} age = student.pop('age') print(student) # {'name': 'John', 'courses': ['Math', 'CompSci']} print(age) # 25 # loop student = {'name': 'John', 'age': 25, 'courses': ['Math', 'CompSci']} print(student.keys()) # dict_keys(['name', 'age', 'courses']) print(student.values()) # dict_values(['John', 25, ['Math', 'CompSci']]) print(student.items()) # dict_items([('name':'John'), ('age':25), ('courses':['Math', 'CompSci'])]) for key in student: print(key) # name; age; courses for key,value in student.items(): print(key,value) #name John; age 25; courses ['Math', 'CompSci']","link":"/blog/2021/01/18/Python-a05-Dictionaries/"},{"title":"Python-a06-Conditions and Boolean","text":"This article shows the examples of Conditions and Boolean in python 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374## basic if True: print('Conditional was true') # Conditional was true if False: print('Conditional was true') # # Comparisons # Equal: == # Not Equal: != # Greater Than: &gt; # Less Than: &lt; # Greater or Equal: &gt;= # Less or Equal: &lt;= # Object Identity: is language = 'Python' if language == 'Python': print('Conditional was true') # Conditional was true else: print('No match') num = [1,2,3] num_two = [1,2,3] num_three = num print(num is num_two) # False print(num is num_three) # True print(id(num)) print(id(num_two)) # if elif else language = 'Python' if language == 'Python': print('Conditional was true') elif language == 'Java': print('Language is Java') else: print('No match') # booleans operators: and or not user = 'Admin' logged_in = True if user == 'Admin' and logged_in: print('Admin Page') else: print('Bad') if user == 'Admin' or logged_in: print('Admin Page') else: print('Bad') if not logged_in: print('Please Log in') else: print('Welcome') # False Values: # False # None # 0 of any numeric type # Any empty sequence, for example: '', (), [] # Any empty mapping, for example: {} condition = False if condition: print('Evaluated to True') else: print('Evaluated to False')","link":"/blog/2021/01/18/Python-a06-Conditions-and-Boolean/"},{"title":"Python-a07 Loops and Iterations","text":"This article shows the examples of Loops and Iterations in python 123456789101112131415161718192021222324252627282930313233343536## loop nums = [1,2,3,4,5] for num in nums: print(num, end=\"; \") # 1; 2; 3; 4; 5 ## break nums = [1,2,3,4,5] for num in nums: if num == 3: print('Found !', end=\"; \") break print(num, end=\"; \") # 1; 2; Found ! ## continue nums = [1,2,3,4,5] for num in nums: if num == 3: print('Found !', end=\"; \") continue print(num, end=\"; \") # 1; 2; Found !; 4; 5; ## loop within loop nums = [1,2,3] for num in nums: for letter in 'abc': print(num, letter, end=\"; \") # 1 a; 1 b; 1 c; 2 a; 2 b; 2 c; 3 a; 3 b; 3 c; ## range for num in range(1, 11): print(num, end=\"; \") # 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; ## while x = 0 while x &lt; 10: print(x, end=\"; \") x+=1 # 0; 1; 2; 3; 4; 5; 6; 7; 8; 9;","link":"/blog/2021/01/29/Python-a07-Loops-and-Iterations/"},{"title":"Python-a08 Functions","text":"This article shows the examples of Functions in python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566## basic def hello_func(): pass print(hello_func) # &lt;function hello_func at 0x000001FC6BA4C430&gt; print(hello_func()) # None## function without input def hello_func(): return 'hello' print(hello_func()) # hello## function with input def hello_func(greeting): return '{} Function.'.format(greeting) print(hello_func('Hi')) # Hi Function.## default value def hello_func(greeting, name='You'): return '{}, {} Function.'.format(greeting, name) print(hello_func('Hi')) # Hi, You Function. ## positional arguments, keyword arguments ## 1 def student_info(*args, **kwargs): print(args) print(kwargs) student_info('Math', 'Art', name='John', age=22) # ('Math', 'Art') # {'name': 'John', 'age': 22} ## 2 courses = ['Math', 'Art'] info = {'name': 'John', 'age': 22} student_info(courses, info) # (['Math', 'Art'], {'name': 'John', 'age': 22}) # {} ## 3 courses = ['Math', 'Art'] info = {'name': 'John', 'age': 22} student_info(*courses, **info) # ('Math', 'Art') # {'name': 'John', 'age': 22} ## example print number of month days month_days = [0,31,28,31,30,31,30,31,31,30,31,30,31] def is_leap(year): \"\"\"Return True for leap years, False for non-leap years.\"\"\" return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0 def days_in_month(year, month): \"\"\"Return number of days in that month in that year.\"\"\" if not 1 &lt;= month &lt;= 12: return 'Invalid Month' if month == 2 and is_leap(year): return 29 return month_days[month] print(days_in_month(2020,2)) # 29 print(days_in_month(2021,2)) # 28","link":"/blog/2021/01/29/Python-a08-Functions/"},{"title":"Python-a10-Functional Programming","text":"This article shows the examples of Functional Programming in python function composition123456789101112131415161718192021# 1def inner(): print('this is the inner function') def outer(func): func() outer(inner) # this is the inner function# 2def outer(): def inner(): print('this is the inner function') return innerouter()() # this is the inner function# sortedanimals = [\"ferret\", \"vole\", \"dog\", \"gecko\"]print(sorted(animals, key=len)) # ['dog', 'vole', 'gecko', 'ferret'] lambda123456789101112131415161718192021# callable Return whether the object is callableprint(callable(lambda s: s[::-1])) # True# 2reverse = lambda s: s[::-1]print(reverse('This is a test')) # tset a si sihT&lt;# 3print((lambda s: s[::-1])('This is a test')) # tset a si sihT# 4print((lambda x, y, z: x + y + z / 3)(1, 2, 3)) # 4.0# 5def func(x): return x, x ** 2, x ** 3print(func(3)) #(3, 9, 27)# 6print((lambda x: (x, x ** 2, x ** 3))(3)) #(3, 9, 27) map123456789101112131415161718# map returns an iteratordef reverse(s): return s[::-1]animals = [\"cat\", \"dog\", \"hedgehog\", \"gecko\"]iterator = map(reverse, animals)print(iterator) # &lt;map object at 0x000001ADCF5CFCD0&gt;print(list(iterator) # ['tac', 'god', 'gohegdeh', 'okceg']# 2print(list(map(lambda s: s[::-1], animals))) # ['tac', 'god', 'gohegdeh', 'okceg']# map with multiple iterablesdef func(a, b, c): return a + b + cprint(list(map(func, [1, 2, 3], [10, 20, 30], [100, 200, 300]))) # [111, 222, 333] filter123456# 1def greater_than_100(x): return x &gt; 100print(list(filter(greater_than_100, [1, 3, 5, 100, 200, 300]))) # [200, 300] reduce12345678910111213141516171819# 1from functools import reducedef add(x, y): return x + yprint(reduce(add, [1, 3, 5])) # 9# complexdef custom_map(function, iterable): from functools import reduce return reduce( lambda items, value: items + [function(value)], iterable, [] )print(list(custom_map(str, [2, 3, 3, 4, 5]))) # ['2', '3', '3', '4', '5']","link":"/blog/2021/03/15/Python-a10-Functional-Programming/"},{"title":"Python-a09-Modules","text":"This article shows the examples of Modules in python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102## my_module.py file print('Imported my_module...') test = 'Test String' def find_index(to_search, target): '''Find the index of a value in a sequence''' for i, value in enumerate(to_search): if value == target: return i return -1 ## test.py basic import my_module courses = ['History', 'Math', 'Physics', 'CompSci'] index = my_module.find_index(courses, 'Math') print(index) # Imported my_module... # 1 ## test.py as import my_module as mm courses = ['History', 'Math', 'Physics', 'CompSci'] index = mm.find_index(courses, 'Math') print(index) # Imported my_module... # 1 ## test.py from from my_module import find_index,test courses = ['History', 'Math', 'Physics', 'CompSci'] index = find_index(courses, 'Math') print(index) # Imported my_module... # 1 print(test) # Test String ## test.py from as from my_module import find_index as fi,test courses = ['History', 'Math', 'Physics', 'CompSci'] index = fi(courses, 'Math') print(index) # Imported my_module... # 1 print(test) # Test String ## sys.path: the path of modules to import from from my_module import find_index, test import sys courses = ['History', 'Math', 'Physics', 'CompSci'] index = find_index(courses, 'Math') # print(index) # print(test) print(sys.path) # ['C:\\\\Dev\\\\examples\\\\python\\\\python_examples',...] ## add path to sys.path or to PYTHONPATH # move my_module.py to new dir mymoduledir # rerun test.py, there is an error ModuleNotFoundError # solution 1: add mymoduledir to sys.path import sys sys.path.append('C:\\Dev\\examples\\python\\python_examples\\mymoduledir') print(sys.path) # solution 2: set mymoduledir to PYTHONPATH set PYTHONPATH=C:\\Dev\\examples\\python\\python_examples\\mymoduledir ## import existing libraries # random import random courses = ['History', 'Math', 'Physics', 'CompSci'] random_choice = random.choice(courses) print(random_choice) # math import math res = math.log2(2) print(res) # 1.0 # datetime import datetime today = datetime.date.today() print(today) # os import os # get current working directory print(os.getcwd())","link":"/blog/2021/01/29/Python-a09-Modules/"},{"title":"Python-a11-pythonic","text":"This article shows the examples of pythonic in python replace map, filter by list comprehension12345678# no pythonicnums = [1, 2, 3, 4, 5]result = map(lambda x: x ** 2, filter(lambda x: x % 2 == 0, nums))print(list(result)) # [4, 16]# pythonicresult2 = [x ** 2 for x in nums if x % 2 == 0]print(list(result2)) # [4, 16] replace list comprehension by generator expressionGenerator expression takes less memory than list comprehension 123456# no pythonicmy_comp = [x * 5 for x in range(1000)]print(getsizeof(my_comp)) # 8856# pythonicmy_gen = (x * 5 for x in range(1000))print(getsizeof(my_gen)) # 112 using of enumerate123456789101112# no pythonicfruits = ['apple','banana', 'orange']for i in range(len(fruits)): print(fruits[i], ':', i) # apple : 0 # banana : 1 # orange : 2 # pythonicfor i, v in enumerate(fruits): print(v, ':', i) # apple : 0 # banana : 1 # orange : 2 use withWith the ‘with’ statement, we get better syntax and exception handing 123456789# no pythonicf = open('test.txt')try: data = f.read()finally: f.close() # we have to close the file by ourself# pythonicwith open('test.txt') as f: data = f.read() # python close the file for us use zip1234567891011121314151617181920# no pythonica = [1, 5, 7]b = [2, 4, 6]for i in range(len(a)): if a[i] &gt; b[i]: print(a[i]) else: print(b[i]) # 2 # 5 # 7# pythonica = [1, 5, 7]b = [2, 4, 6]for i, j in zip(a, b): if i &gt; j: print(i) else: print(j) # 2 # 5 # 7 exchange two variables1234567891011# no pythonica = 'hello'b = 'world'a,b=b,aprint(a, b) # world hello# pythonica = 'hello'b = 'world'a,b=b,aprint(a, b) # world hello","link":"/blog/2021/03/16/Python-a11-pythonic/"},{"title":"Python-b01-Classes and Instances","text":"This article shows the examples of Classes and Instances in python OOP: Object-Oriented Programming 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# basicclass Employee: def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last)emp_1 = Employee('Bob', 'Gobdo', 20)print(emp_1.email)print(emp_1.fullname())# the same thing of fullname()print(Employee.fullname(emp_1))# class variablesclass Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) # raise_amount is class vriable, we can remplace by Employee.raise_amountemp_1 = Employee('Bob', 'Gobdo', 20)print(emp_1.pay) # 20emp_1.apply_raise()print(emp_1.pay) # 40print(Employee.__dict__) # there is raise_amount insideprint(emp_1.__dict__) # there is no raise_amount inside# change raise_amount by instanceemp_1 = Employee('Bob', 'Gobdo', 20)emp_2 = Employee('John', 'Youhs', 30)emp_1.raise_amount = 3print(Employee.raise_amount) # 2.04print(emp_1.raise_amount) # 3print(emp_2.raise_amount) # 2.04# change raise_amount by classemp_1 = Employee('Bob', 'Gobdo', 20)emp_2 = Employee('John', 'Youhs', 30)Employee.raise_amount = 3print(Employee.raise_amount) # 3print(emp_1.raise_amount) # 3print(emp_2.raise_amount) # 3","link":"/blog/2021/02/01/Python-b01-Classes-and-Instances/"},{"title":"Python-b02-classmethod-staticmethod","text":"This article shows the examples of classmethod and staticmethod in python regular method1234567891011121314151617181920212223242526272829class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amountemp_1 = Employee('Bob', 'Gobdo', 20)emp_2 = Employee('John', 'Youh', 30)emp_1.set_regular_raise_amount(6)print(emp_1.raise_amount) # 6print(emp_2.raise_amount) # 2.04print(Employee.raise_amount) # 2.04``` ## classmethod class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount emp_1 = Employee(‘Bob’, ‘Gobdo’, 20)emp_2 = Employee(‘John’, ‘Youh’, 30) Employee.set_class_raise_amount(5) print(emp_1.raise_amount) # 5print(emp_2.raise_amount) # 5print(Employee.raise_amount) # 5 1## staticmethod class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return True import datetimemy_date = datetime.date(2016,1,2)print(Employee.is_workday(my_date)) # False 1## example class A(object): bar = 1 def func1(self): print('foo') @classmethod def func2(cls): print('func2') print(cls.bar) cls().func1() @staticmethod def func3(): print('func3') print(A.bar) A().func1() # fooA.func2() # func2 # 1 # fooA.func3() # func3 # 1 ```","link":"/blog/2021/02/02/Python-b02-classmethod-staticmethod/"},{"title":"Python-b03-Inheritance","text":"This article shows the examples of inheritance in python 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124# Developer is a sub class of Employeeclass Employee:raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return Trueclass Developer(Employee):passemp_1 = Developer('Bob', 'Gobdo', 20)emp_2 = Developer('John', 'Youhs', 30)print(emp_1.email) # Bob.Gobdo@company.comprint(emp_2.email) # John.Youhs@company.comprint(help(Developer))# change variable in sub classclass Developer(Employee): raise_amount = 3emp_1 = Employee('Bob', 'Gobdo', 20)print(emp_1.pay) # 20emp_1.apply_raise()print(emp_1.pay) # 40dev_1 = Developer('Bob', 'Gobdo', 20)print(emp_1.pay) # 20emp_1.apply_raise()print(emp_1.pay) # 60# inherit __init__class Developer(Employee): raise_amount = 3 def __init__(self, first, last, pay, prog_lang): super().__init__(first, last, pay) self.prog_lang = prog_langdev_1 = Developer('Bob', 'Gobdo', 20, 'Python')print(dev_1.email) # Bob.Gobdo@company.comprint(dev_1.prog_lang) # Python# another sub classclass Developer(Employee): raise_amount = 3 def __init__(self, first, last, pay, prog_lang): super().__init__(first, last, pay) self.prog_lang = prog_langclass Manager(Employee): def __init__(self, first, last, pay, employees = None): super().__init__(first, last, pay) if employees is None: self.employees = [] else: self.employees = employees def add_employee(self, emp): if emp not in self.employees: self.employees.append(emp) def remove_employee(self, emp): if emp in self.employees: self.employees.remove(emp) def print_emps(self): for emp in self.employees: print('--&gt;', emp.fullname())dev_1 = Developer('Bob', 'Gobdo', 20, 'Python')mgr_1 = Manager('Sue', 'Smith', 50, [dev_1])print(mgr_1.email) # Sue.Smith@company.commgr_1.print_emps() # --&gt; Bob Gobdodev_2 = Developer('John', 'Youhs', 30, 'Java')mgr_1.add_employee(dev_2)mgr_1.print_emps() # --&gt; Bob Gobdo # --&gt; John Youhsmgr_1.remove_employee(dev_2)mgr_1.print_emps() # --&gt; Bob Gobdo# isinstance, issubclassprint(isinstance(mgr_1, Manager)) # Trueprint(isinstance(mgr_1, Employee)) # Trueprint(isinstance(mgr_1, Developer)) # Falseprint(issubclass(Developer, Employee)) # Trueprint(issubclass(Manager, Employee)) # Trueprint(issubclass(Manager, Developer)) # False","link":"/blog/2021/02/02/Python-b03-Inheritance/"},{"title":"Python-b04-Special(Magic/Dunder) Methods","text":"This article shows the examples of special(magic/dunder) methods in python basic123456789101112131415161718192021222324252627282930class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return Trueemp_1 = Employee('Bob', 'Gobdo', 20)print(emp_1) # &lt;__main__.Employee object at 0x00000200249F63A0&gt; __repr__ method is used for debug12345678910111213141516171819202122232425262728293031323334 class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return True def __repr__(self): return \"Employee('{}','{}',{})\".format(self.first, self.last, self.pay)emp_1 = Employee('Bob', 'Gobdo', 20)print(emp_1) #Employee('Bob','Gobdo',20) __str__ method is used for user1234567891011121314151617181920212223242526272829303132333435363738class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return True def __repr__(self): return \"Employee('{}','{}',{})\".format(self.first, self.last, self.pay) def __str__(self): return '{} - {}'.format(self.fullname(), self.email) emp_1 = Employee('Bob', 'Gobdo', 20)print(emp_1) # Bob Gobdo - Bob.Gobdo@company.comprint(emp_1.__repr__()) # Employee('Bob','Gobdo',20) __add__ method12345678910111213141516171819202122232425262728293031323334353637383940class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return True def __repr__(self): return \"Employee('{}','{}',{})\".format(self.first, self.last, self.pay) def __str__(self): return '{} - {}'.format(self.fullname(), self.email) def __add__(self, other): return self.pay + other.payemp_1 = Employee('Bob', 'Gobdo', 20)emp_2 = Employee('John', 'Youhs', 30)print(emp_1 + emp_2) # 50 __len__ method12345678910111213141516171819202122232425262728293031323334353637383940414243class Employee: raise_amount = 2.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) def set_regular_raise_amount(self, amount): self.raise_amount = amount @classmethod def set_class_raise_amount(cls, amount): cls.raise_amount = amount @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False return True def __repr__(self): return \"Employee('{}','{}',{})\".format(self.first, self.last, self.pay) def __str__(self): return '{} - {}'.format(self.fullname(), self.email) def __add__(self, other): return self.pay + other.pay def __len__(self): return len(self.fullname())emp_1 = Employee('Bob', 'Gobdo', 20)print(len(emp_1)) # 9","link":"/blog/2021/02/03/Python-b04-Special-Magic-Dunder-Methods/"},{"title":"Python-b05-Property Decorators","text":"This article shows the examples of in python email does not change when first changes12345678910111213141516171819class Employee: raise_amount = 2.04 def __init__(self, first, last): self.first = first self.last = last self.email = first + '.' + last + '@company.com' def fullname(self): return '{} {}'.format(self.first, self.last)emp_1 = Employee('Bob', 'Gobdo')emp_1.first = 'Jim'print(emp_1.first) # Jimprint(emp_1.email) # Bob.Gobdo@company.comprint(emp_1.fullname()) # Jim Gobdo email move into method123456789101112131415161718192021class Employee: raise_amount = 2.04 def __init__(self, first, last): self.first = first self.last = last def email(self): return '{}.{}@company.com'.format(self.first, self.last) def fullname(self): return '{} {}'.format(self.first, self.last)emp_1 = Employee('Bob', 'Gobdo')emp_1.first = 'Jim'print(emp_1.first) # Jimprint(emp_1.email()) # Jim.Gobdo@company.comprint(emp_1.fullname()) # Jim Gobdo add @property on method1234567891011121314151617181920212223class Employee: raise_amount = 2.04 def __init__(self, first, last): self.first = first self.last = last @property def email(self): return '{}.{}@company.com'.format(self.first, self.last) @property def fullname(self): return '{} {}'.format(self.first, self.last)emp_1 = Employee('Bob', 'Gobdo')emp_1.first = 'Jim'print(emp_1.first) # Jimprint(emp_1.email) # Jim.Gobdo@company.comprint(emp_1.fullname) # Jim Gobdo setter12345678910111213141516171819202122232425262728class Employee: raise_amount = 2.04 def __init__(self, first, last): self.first = first self.last = last @property def email(self): return '{}.{}@company.com'.format(self.first, self.last) @property def fullname(self): return '{} {}'.format(self.first, self.last) @fullname.setter def fullname(self, name): first, last = name.split(' ') self.first = first self.last = lastemp_1 = Employee('Bob', 'Gobdo')emp_1.fullname = 'John Smith'print(emp_1.first) # Johnprint(emp_1.email) # John.Smith@company.comprint(emp_1.fullname) # John Smith deleter12345678910111213141516171819202122232425262728293031323334class Employee: raise_amount = 2.04 def __init__(self, first, last): self.first = first self.last = last @property def email(self): return '{}.{}@company.com'.format(self.first, self.last) @property def fullname(self): return '{} {}'.format(self.first, self.last) @fullname.setter def fullname(self, name): first, last = name.split(' ') self.first = first self.last = last @fullname.deleter def fullname(self): print('Delete name') self.first = None self.last = Noneemp_1 = Employee('Bob', 'Gobdo')del emp_1.fullnameprint(emp_1.first) # Noneprint(emp_1.email) # None.None@company.comprint(emp_1.fullname) # None None","link":"/blog/2021/02/04/Python-b05-Property-Decorators/"},{"title":"Python-c01-Jupyter","text":"How to install Jupyter on local machine? Here we use docker to do the installation. install docker on the windows, in this example, we use docker on windowsdownload the installer from https://docs.docker.com/desktop/install/windows-install/ and install it simplyNB: you have to use the admin account open the terminal with admin and install the jupyter1docker run -p 8888:8888 -v C:\\dev\\softwares\\docker_data\\jupyter_data:/home/jovyan/work jupyter/scipy-notebook run jupyter in a browserYou can find the url from the logs or from the desktop set the passwordyou have to set a password for the jupyter, remember it as you have to type it for the next times the interface","link":"/blog/2022/10/06/Python-c01-Jupyter/"},{"title":"Python-c02-Getting Started with Pandas","text":"I will show a simple example of csv with pandas, you can download the files from here:survey_results_public.csvsurvey_results_schema.csv Notebook1import pandas as pd 1df = pd.read_csv('data/survey_results_public.csv') 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Respondent Professional ProgramHobby Country University EmploymentStatus FormalEducation MajorUndergrad HomeRemote CompanySize ... StackOverflowMakeMoney Gender HighestEducationParents Race SurveyLong QuestionsInteresting QuestionsConfusing InterestedAnswers Salary ExpectedSalary 0 1 Student Yes, both United States No Not employed, and not looking for work Secondary school NaN NaN NaN ... Strongly disagree Male High school White or of European descent Strongly disagree Strongly agree Disagree Strongly agree NaN NaN 1 2 Student Yes, both United Kingdom Yes, full-time Employed part-time Some college/university study without earning ... Computer science or software engineering More than half, but not all, the time 20 to 99 employees ... Strongly disagree Male A master's degree White or of European descent Somewhat agree Somewhat agree Disagree Strongly agree NaN 37500.0 2 3 Professional developer Yes, both United Kingdom No Employed full-time Bachelor's degree Computer science or software engineering Less than half the time, but at least one day ... 10,000 or more employees ... Disagree Male A professional degree White or of European descent Somewhat agree Agree Disagree Agree 113750.0 NaN 3 4 Professional non-developer who sometimes write... Yes, both United States No Employed full-time Doctoral degree A non-computer-focused engineering discipline Less than half the time, but at least one day ... 10,000 or more employees ... Disagree Male A doctoral degree White or of European descent Agree Agree Somewhat agree Strongly agree NaN NaN 4 5 Professional developer Yes, I program as a hobby Switzerland No Employed full-time Master's degree Computer science or software engineering Never 10 to 19 employees ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 19097 19098 Professional developer Yes, I program as a hobby Canada No Employed full-time Bachelor's degree A business discipline A few days each month 10 to 19 employees ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Agree Disagree Agree NaN NaN 19098 19099 Student Yes, I program as a hobby India No Not employed, and not looking for work Secondary school NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19099 19100 Professional non-developer who sometimes write... Yes, I program as a hobby United Kingdom No Independent contractor, freelancer, or self-em... Bachelor's degree Computer science or software engineering Never NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19100 19101 Professional developer Yes, I program as a hobby United States No Employed full-time Some college/university study without earning ... A humanities discipline Less than half the time, but at least one day ... 100 to 499 employees ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Somewhat agree Disagree Agree 110000.0 NaN 19101 19102 Professional developer Yes, I program as a hobby France No Employed full-time Master's degree Computer science or software engineering All or almost all the time (I'm full-time remote) 100 to 499 employees ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19102 rows × 154 columns 12# shape give us the number of rows and columns of the dataframedf.shape (19102, 154) 1df.info() &lt;class ‘pandas.core.frame.DataFrame’&gt;RangeIndex: 19102 entries, 0 to 19101Columns: 154 entries, Respondent to ExpectedSalarydtypes: float64(6), int64(1), object(147)memory usage: 22.4+ MB 123# set the number of columns and rows displayedpd.set_option('display.max_columns', 154)pd.set_option('display.max_rows', 154)","link":"/blog/2022/10/06/Python-c02-Getting-Started-with-Pandas/"},{"title":"Python-c03-DataFrame and Series","text":"1import pandas as pd 12345person = { \"first\": \"Corey\", \"last\": \"Schafer\", \"email\": \"CoreyMSchafer@gmail.com\"} 12345people = { \"first\": [\"Corey\"], \"last\": [\"Schafer\"], \"email\": [\"CoreyMSchafer@gmail.com\"]} 12345people = { \"first\": [\"Corey\", 'Jane', 'John'], \"last\": [\"Schafer\", 'Doe', 'Doe'], \"email\": [\"CoreyMSchafer@gmail.com\", 'JaneDoe@email.com', 'JohnDoe@email.com']} 1people['email'] [‘CoreyMSchafer@gmail.com‘, ‘JaneDoe@email.com‘, ‘JohnDoe@email.com‘] 1df = pd.DataFrame(people) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 1df['email'] 0 CoreyMSchafer@gmail.com1 JaneDoe@email.com2 JohnDoe@email.comName: email, dtype: object 12#display multiple columnsdf[['last', 'email']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } last email 0 Schafer CoreyMSchafer@gmail.com 1 Doe JaneDoe@email.com 2 Doe JohnDoe@email.com 123# iloc: integer location: put the integer index to get the row# get the first row in this exampledf.iloc[0] first Coreylast Schaferemail CoreyMSchafer@gmail.comName: 0, dtype: object 1df.iloc[[0, 1]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 12# get the email and last of the first and second rowdf.loc[[0, 1], ['email', 'last']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } email last 0 CoreyMSchafer@gmail.com Schafer 1 JaneDoe@email.com Doe 1df.iloc[[0, 1], ['email', 'last']] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) Cell In [15], line 1—-&gt; 1 df.iloc[[0, 1], [‘email’, ‘last’]] File /opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1068, in _LocationIndexer.getitem(self, key) 1066 if self._is_scalar_access(key): 1067 return self.obj._get_value(*key, takeable=self._takeable)-&gt; 1068 return self._getitem_tuple(key) 1069 else: 1070 # we by definition only have the 0th axis 1071 axis = self.axis or 0 File /opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1564, in _iLocIndexer._getitem_tuple(self, tup) 1562 def _getitem_tuple(self, tup: tuple):-&gt; 1564 tup = self._validate_tuple_indexer(tup) 1565 with suppress(IndexingError): 1566 return self._getitem_lowerdim(tup) File /opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:874, in _LocationIndexer._validate_tuple_indexer(self, key) 872 for i, k in enumerate(key): 873 try:–&gt; 874 self._validate_key(k, i) 875 except ValueError as err: 876 raise ValueError( 877 “Location based indexing can only have “ 878 f”[{self._valid_types}] types” 879 ) from err File /opt/conda/lib/python3.10/site-packages/pandas/core/indexing.py:1478, in _iLocIndexer._validate_key(self, key, axis) 1476 # check that the key has a numeric dtype 1477 if not is_numeric_dtype(arr.dtype):-&gt; 1478 raise IndexError(f”.iloc requires numeric indexers, got {arr}”) 1480 # check that the key does not exceed the maximum size of the index 1481 if len(arr) and (arr.max() &gt;= len_axis or arr.min() &lt; -len_axis): IndexError: .iloc requires numeric indexers, got [‘email’ ‘last’] 1df.iloc[[0, 1], [1,2]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } last email 0 Schafer CoreyMSchafer@gmail.com 1 Doe JaneDoe@email.com","link":"/blog/2022/10/07/Python-c03-DataFrame-and-Series/"},{"title":"Python-c04-indexes","text":"1import pandas as pd 12df = pd.read_csv('data/survey_results_public.csv', index_col='Respondent')df_schema = pd.read_csv('data/survey_results_schema.csv', index_col='Column') 12# inplace=True will apply the changes to the DataFramedf_schema.sort_index(inplace=True) 1df_schema .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Question Column AnnoyingUI It annoys me when software has a poor UI AssessJobCommute When you're assessing potential jobs to apply ... AssessJobCompensation When you're assessing potential jobs to apply ... AssessJobDept When you're assessing potential jobs to apply ... AssessJobDiversity When you're assessing potential jobs to apply ... ... ... WorkPayCare I don't really care what I work on, so long as... WorkStart Suppose you could choose your own working hour... YearsCodedJob For how many years have you coded as part of y... YearsCodedJobPast For how many years did you code as part of you... YearsProgram How long has it been since you first learned h... 154 rows × 1 columns 12# set index to the Countrydf.set_index('Country', inplace=True) 12# give the list of index elementsdf.index Index([‘United States’, ‘United Kingdom’, ‘United Kingdom’, ‘United States’, ‘Switzerland’, ‘New Zealand’, ‘United States’, ‘Poland’, ‘Colombia’, ‘France’, … ‘United States’, ‘India’, ‘United Kingdom’, ‘United States’, ‘France’, ‘Canada’, ‘India’, ‘United Kingdom’, ‘United States’, ‘France’], dtype=’object’, name=’Country’, length=19102) 12# pass the element of the index to locdf.loc['United States'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } University EmploymentStatus FormalEducation MajorUndergrad HomeRemote CompanySize CompanyType YearsProgram YearsCodedJob YearsCodedJobPast ... StackOverflowMakeMoney Gender HighestEducationParents Race SurveyLong QuestionsInteresting QuestionsConfusing InterestedAnswers Salary ExpectedSalary Country United States No Not employed, and not looking for work Secondary school NaN NaN NaN NaN 2 to 3 years NaN NaN ... Strongly disagree Male High school White or of European descent Strongly disagree Strongly agree Disagree Strongly agree NaN NaN United States No Employed full-time Doctoral degree A non-computer-focused engineering discipline Less than half the time, but at least one day ... 10,000 or more employees Non-profit/non-governmental organization or pr... 14 to 15 years 9 to 10 years NaN ... Disagree Male A doctoral degree White or of European descent Agree Agree Somewhat agree Strongly agree NaN NaN United States No Employed full-time Master's degree A non-computer-focused engineering discipline Less than half the time, but at least one day ... 20 to 99 employees Government agency or public school/university 9 to 10 years 8 to 9 years NaN ... Disagree Male A doctoral degree White or of European descent Disagree Agree Disagree Agree NaN NaN United States No Employed full-time Bachelor's degree A social science All or almost all the time (I'm full-time remote) 100 to 499 employees Venture-funded startup 12 to 13 years 11 to 12 years NaN ... Strongly disagree Female Some college/university study, no bachelor's d... White or of European descent Strongly disagree Agree Strongly disagree Strongly agree NaN NaN United States Yes, part-time Independent contractor, freelancer, or self-em... Primary/elementary school NaN All or almost all the time (I'm full-time remote) NaN NaN 11 to 12 years 1 to 2 years NaN ... Disagree Male A doctoral degree White or of European descent Disagree Somewhat agree Strongly disagree Agree NaN NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... United States No Employed full-time Bachelor's degree A natural science All or almost all the time (I'm full-time remote) Fewer than 10 employees Privately-held limited company, not in startup... 6 to 7 years 3 to 4 years NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN United States No Employed part-time Some college/university study without earning ... Computer science or software engineering Less than half the time, but at least one day ... 10 to 19 employees Sole proprietorship or partnership, not in sta... 2 to 3 years 1 to 2 years NaN ... NaN Male Some college/university study, no bachelor's d... White or of European descent Disagree Agree Disagree Strongly agree NaN NaN United States No Employed full-time Bachelor's degree Management information systems Never 10,000 or more employees Publicly-traded corporation 20 or more years 20 or more years NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN United States No Employed full-time Bachelor's degree Computer science or software engineering A few days each month 100 to 499 employees Venture-funded startup 20 or more years 19 to 20 years NaN ... Disagree Male A bachelor's degree White or of European descent Somewhat agree Somewhat agree Disagree Somewhat agree NaN NaN United States No Employed full-time Some college/university study without earning ... A humanities discipline Less than half the time, but at least one day ... 100 to 499 employees Sole proprietorship or partnership, not in sta... 20 or more years 20 or more years NaN ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Somewhat agree Disagree Agree 110000.0 NaN 4364 rows × 150 columns 12# reset the index to the integerdf.reset_index(inplace=True) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Country University EmploymentStatus FormalEducation MajorUndergrad HomeRemote CompanySize CompanyType YearsProgram YearsCodedJob ... StackOverflowMakeMoney Gender HighestEducationParents Race SurveyLong QuestionsInteresting QuestionsConfusing InterestedAnswers Salary ExpectedSalary 0 United States No Not employed, and not looking for work Secondary school NaN NaN NaN NaN 2 to 3 years NaN ... Strongly disagree Male High school White or of European descent Strongly disagree Strongly agree Disagree Strongly agree NaN NaN 1 United Kingdom Yes, full-time Employed part-time Some college/university study without earning ... Computer science or software engineering More than half, but not all, the time 20 to 99 employees Privately-held limited company, not in startup... 9 to 10 years NaN ... Strongly disagree Male A master's degree White or of European descent Somewhat agree Somewhat agree Disagree Strongly agree NaN 37500.0 2 United Kingdom No Employed full-time Bachelor's degree Computer science or software engineering Less than half the time, but at least one day ... 10,000 or more employees Publicly-traded corporation 20 or more years 20 or more years ... Disagree Male A professional degree White or of European descent Somewhat agree Agree Disagree Agree 113750.0 NaN 3 United States No Employed full-time Doctoral degree A non-computer-focused engineering discipline Less than half the time, but at least one day ... 10,000 or more employees Non-profit/non-governmental organization or pr... 14 to 15 years 9 to 10 years ... Disagree Male A doctoral degree White or of European descent Agree Agree Somewhat agree Strongly agree NaN NaN 4 Switzerland No Employed full-time Master's degree Computer science or software engineering Never 10 to 19 employees Privately-held limited company, not in startup... 20 or more years 10 to 11 years ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 19097 Canada No Employed full-time Bachelor's degree A business discipline A few days each month 10 to 19 employees Privately-held limited company, not in startup... 1 to 2 years 1 to 2 years ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Agree Disagree Agree NaN NaN 19098 India No Not employed, and not looking for work Secondary school NaN NaN NaN NaN 1 to 2 years NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19099 United Kingdom No Independent contractor, freelancer, or self-em... Bachelor's degree Computer science or software engineering Never NaN NaN 14 to 15 years 14 to 15 years ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19100 United States No Employed full-time Some college/university study without earning ... A humanities discipline Less than half the time, but at least one day ... 100 to 499 employees Sole proprietorship or partnership, not in sta... 20 or more years 20 or more years ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Somewhat agree Disagree Agree 110000.0 NaN 19101 France No Employed full-time Master's degree Computer science or software engineering All or almost all the time (I'm full-time remote) 100 to 499 employees Sole proprietorship or partnership, not in sta... 14 to 15 years 9 to 10 years ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19102 rows × 151 columns 1df.sort_index(ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Country University EmploymentStatus FormalEducation MajorUndergrad HomeRemote CompanySize CompanyType YearsProgram YearsCodedJob ... StackOverflowMakeMoney Gender HighestEducationParents Race SurveyLong QuestionsInteresting QuestionsConfusing InterestedAnswers Salary ExpectedSalary 19101 France No Employed full-time Master's degree Computer science or software engineering All or almost all the time (I'm full-time remote) 100 to 499 employees Sole proprietorship or partnership, not in sta... 14 to 15 years 9 to 10 years ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19100 United States No Employed full-time Some college/university study without earning ... A humanities discipline Less than half the time, but at least one day ... 100 to 499 employees Sole proprietorship or partnership, not in sta... 20 or more years 20 or more years ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Somewhat agree Disagree Agree 110000.0 NaN 19099 United Kingdom No Independent contractor, freelancer, or self-em... Bachelor's degree Computer science or software engineering Never NaN NaN 14 to 15 years 14 to 15 years ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19098 India No Not employed, and not looking for work Secondary school NaN NaN NaN NaN 1 to 2 years NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19097 Canada No Employed full-time Bachelor's degree A business discipline A few days each month 10 to 19 employees Privately-held limited company, not in startup... 1 to 2 years 1 to 2 years ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Agree Disagree Agree NaN NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 4 Switzerland No Employed full-time Master's degree Computer science or software engineering Never 10 to 19 employees Privately-held limited company, not in startup... 20 or more years 10 to 11 years ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 3 United States No Employed full-time Doctoral degree A non-computer-focused engineering discipline Less than half the time, but at least one day ... 10,000 or more employees Non-profit/non-governmental organization or pr... 14 to 15 years 9 to 10 years ... Disagree Male A doctoral degree White or of European descent Agree Agree Somewhat agree Strongly agree NaN NaN 2 United Kingdom No Employed full-time Bachelor's degree Computer science or software engineering Less than half the time, but at least one day ... 10,000 or more employees Publicly-traded corporation 20 or more years 20 or more years ... Disagree Male A professional degree White or of European descent Somewhat agree Agree Disagree Agree 113750.0 NaN 1 United Kingdom Yes, full-time Employed part-time Some college/university study without earning ... Computer science or software engineering More than half, but not all, the time 20 to 99 employees Privately-held limited company, not in startup... 9 to 10 years NaN ... Strongly disagree Male A master's degree White or of European descent Somewhat agree Somewhat agree Disagree Strongly agree NaN 37500.0 0 United States No Not employed, and not looking for work Secondary school NaN NaN NaN NaN 2 to 3 years NaN ... Strongly disagree Male High school White or of European descent Strongly disagree Strongly agree Disagree Strongly agree NaN NaN 19102 rows × 151 columns","link":"/blog/2022/10/07/Python-c04-indexes/"},{"title":"Python-c05-Filtering","text":"12345people = { \"first\": [\"Corey\", 'Jane', 'John'], \"last\": [\"Schafer\", 'Doe', 'Doe'], \"email\": [\"CoreyMSchafer@gmail.com\", 'JaneDoe@email.com', 'JohnDoe@email.com']} 1import pandas as pd 1df = pd.DataFrame(people) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 1filt = (df['last'] == 'Doe') 1df[filt] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 12# filter df with filt and return just the column first and emaildf.loc[filt, ['first', 'email']] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first email 1 Jane JaneDoe@email.com 2 John JohnDoe@email.com 12# not in filter ~df.loc[~filt, 'email'] 0 CoreyMSchafer@gmail.comName: email, dtype: object 1234# isin filterlasts = ['Doe', 'Mike', 'Bob']filt = df['last'].isin(lasts)df.loc[filt, 'email'] 1 JaneDoe@email.com2 JohnDoe@email.comName: email, dtype: object 1df = pd.read_csv('data/survey_results_public.csv') 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Respondent Professional ProgramHobby Country University EmploymentStatus FormalEducation MajorUndergrad HomeRemote CompanySize ... StackOverflowMakeMoney Gender HighestEducationParents Race SurveyLong QuestionsInteresting QuestionsConfusing InterestedAnswers Salary ExpectedSalary 0 1 Student Yes, both United States No Not employed, and not looking for work Secondary school NaN NaN NaN ... Strongly disagree Male High school White or of European descent Strongly disagree Strongly agree Disagree Strongly agree NaN NaN 1 2 Student Yes, both United Kingdom Yes, full-time Employed part-time Some college/university study without earning ... Computer science or software engineering More than half, but not all, the time 20 to 99 employees ... Strongly disagree Male A master's degree White or of European descent Somewhat agree Somewhat agree Disagree Strongly agree NaN 37500.0 2 3 Professional developer Yes, both United Kingdom No Employed full-time Bachelor's degree Computer science or software engineering Less than half the time, but at least one day ... 10,000 or more employees ... Disagree Male A professional degree White or of European descent Somewhat agree Agree Disagree Agree 113750.0 NaN 3 4 Professional non-developer who sometimes write... Yes, both United States No Employed full-time Doctoral degree A non-computer-focused engineering discipline Less than half the time, but at least one day ... 10,000 or more employees ... Disagree Male A doctoral degree White or of European descent Agree Agree Somewhat agree Strongly agree NaN NaN 4 5 Professional developer Yes, I program as a hobby Switzerland No Employed full-time Master's degree Computer science or software engineering Never 10 to 19 employees ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 19097 19098 Professional developer Yes, I program as a hobby Canada No Employed full-time Bachelor's degree A business discipline A few days each month 10 to 19 employees ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Agree Disagree Agree NaN NaN 19098 19099 Student Yes, I program as a hobby India No Not employed, and not looking for work Secondary school NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19099 19100 Professional non-developer who sometimes write... Yes, I program as a hobby United Kingdom No Independent contractor, freelancer, or self-em... Bachelor's degree Computer science or software engineering Never NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19100 19101 Professional developer Yes, I program as a hobby United States No Employed full-time Some college/university study without earning ... A humanities discipline Less than half the time, but at least one day ... 100 to 499 employees ... Disagree Male Some college/university study, no bachelor's d... White or of European descent Somewhat agree Somewhat agree Disagree Agree 110000.0 NaN 19101 19102 Professional developer Yes, I program as a hobby France No Employed full-time Master's degree Computer science or software engineering All or almost all the time (I'm full-time remote) 100 to 499 employees ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19102 rows × 154 columns 12# na=False means if not found the result, put Falsefilt = df['MajorUndergrad'].str.contains('software', na=False) 1df.loc[filt] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Respondent Professional ProgramHobby Country University EmploymentStatus FormalEducation MajorUndergrad HomeRemote CompanySize ... StackOverflowMakeMoney Gender HighestEducationParents Race SurveyLong QuestionsInteresting QuestionsConfusing InterestedAnswers Salary ExpectedSalary 1 2 Student Yes, both United Kingdom Yes, full-time Employed part-time Some college/university study without earning ... Computer science or software engineering More than half, but not all, the time 20 to 99 employees ... Strongly disagree Male A master's degree White or of European descent Somewhat agree Somewhat agree Disagree Strongly agree NaN 37500.0 2 3 Professional developer Yes, both United Kingdom No Employed full-time Bachelor's degree Computer science or software engineering Less than half the time, but at least one day ... 10,000 or more employees ... Disagree Male A professional degree White or of European descent Somewhat agree Agree Disagree Agree 113750.0 NaN 4 5 Professional developer Yes, I program as a hobby Switzerland No Employed full-time Master's degree Computer science or software engineering Never 10 to 19 employees ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 7 8 Professional developer Yes, both Poland No Employed full-time Master's degree Computer science or software engineering All or almost all the time (I'm full-time remote) Fewer than 10 employees ... Somewhat agree Male A master's degree White or of European descent Agree Somewhat agree Disagree Agree NaN NaN 8 9 Professional developer Yes, I program as a hobby Colombia Yes, part-time Employed full-time Bachelor's degree Computer science or software engineering Less than half the time, but at least one day ... 5,000 to 9,999 employees ... Strongly disagree Male A bachelor's degree Hispanic or Latino/Latina Somewhat agree Strongly agree Disagree Strongly agree NaN NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 19091 19092 Professional developer No Sweden No Employed full-time Master's degree Computer science or software engineering Never 100 to 499 employees ... Strongly disagree Male A master's degree White or of European descent Disagree Agree Somewhat agree Strongly agree NaN NaN 19095 19096 Professional developer Yes, both United States No Employed full-time Bachelor's degree Computer science or software engineering A few days each month 100 to 499 employees ... Disagree Male A bachelor's degree White or of European descent Somewhat agree Somewhat agree Disagree Somewhat agree NaN NaN 19096 19097 Professional developer No France No Employed full-time Master's degree Computer science or software engineering Never 20 to 99 employees ... Strongly disagree Male High school White or of European descent Strongly agree Somewhat agree Somewhat agree Somewhat agree NaN NaN 19099 19100 Professional non-developer who sometimes write... Yes, I program as a hobby United Kingdom No Independent contractor, freelancer, or self-em... Bachelor's degree Computer science or software engineering Never NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 19101 19102 Professional developer Yes, I program as a hobby France No Employed full-time Master's degree Computer science or software engineering All or almost all the time (I'm full-time remote) 100 to 499 employees ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 8098 rows × 154 columns","link":"/blog/2022/10/07/Python-c05-Filtering/"},{"title":"Python-c06-udpate data","text":"12345people = { \"first\": [\"Corey\", 'Jane', 'John'], \"last\": [\"Schafer\", 'Doe', 'Doe'], \"email\": [\"CoreyMSchafer@gmail.com\", 'JaneDoe@email.com', 'JohnDoe@email.com']} 1import pandas as pd 1df = pd.DataFrame(people) 1df.columns Index([‘first’, ‘last’, ‘email’], dtype=’object’) 12# change all of the column namesdf.columns=['first_name', 'last_name', 'email'] 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first_name last_name email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 12# change all column names to upper casedf.columns = [x.upper() for x in df.columns] 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } FIRST_NAME LAST_NAME EMAIL 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 123# replace _ by space in all of the column names and vice versadf.columns = df.columns.str.replace('_', ' ')df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } FIRST NAME LAST NAME EMAIL 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 123df.columns = df.columns.str.replace(' ', '_')df.columns = [x.lower() for x in df.columns]df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first_name last_name email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 123# change only some columns: pass a dictionary for the key as the old name and the value as the new namedf.rename(columns={'first_name': 'first', 'last_name': 'last'}, inplace=True)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnDoe@email.com 1# change the data values 123# change all column values for a specific rowdf.loc[2] = ['John', 'Smith', 'JohnSmith@email.com']df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Smith JohnSmith@email.com 123# change only some columns in the row 2df.loc[2, ['last', 'email']] = ['Smith', 'JohnSmith@email.com']df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Smith JohnSmith@email.com 123# or we can also use at to change a specific column valuedf.at[2, 'last'] = 'Doe'df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Doe JohnSmith@email.com 1234# change value with filter: we have to use locfilt = (df['email'] == 'JohnSmith@email.com')df.loc[filt, 'last'] = 'Smith'df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer CoreyMSchafer@gmail.com 1 Jane Doe JaneDoe@email.com 2 John Smith JohnSmith@email.com 123# change email to lower casedf['email'] = df['email'].str.lower()df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer coreymschafer@gmail.com 1 Jane Doe janedoe@email.com 2 John Smith johnsmith@email.com 123# apply# return the email length of each rowdf['email'].apply(len) 0 231 172 19Name: email, dtype: int64 12345def update_email(email): return email.upper()df['email'] = df['email'].apply(update_email)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer COREYMSCHAFER@GMAIL.COM 1 Jane Doe JANEDOE@EMAIL.COM 2 John Smith JOHNSMITH@EMAIL.COM 123# use lambda functiondf['email'] = df['email'].apply(lambda x: x.lower())df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 Corey Schafer coreymschafer@gmail.com 1 Jane Doe janedoe@email.com 2 John Smith johnsmith@email.com 123# run apply on a dataframe# this gives us the value count of each columndf.apply(len) first 3last 3email 3dtype: int64 12# this gives us the column count of each rowdf.apply(len, axis='columns') 0 31 32 3dtype: int64 12# get the min of each columndf.apply(pd.Series.min) first Coreylast Doeemail coreymschafer@gmail.comdtype: object 12# applymap works only on every element of the DataFramedf.applymap(len) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } first last email 0 5 7 23 1 4 3 17 2 4 5 19 123# map works on the Series# replace Corey by Chris, Jane by Mary and put NaN to emaildf['first'].map({'Corey': 'Chris', 'Jane': 'Mary'}) 0 Chris1 Mary2 NaNName: first, dtype: object 12# this replace just the first and last, but not the emaildf['first'].replace({'Corey': 'Chris', 'Jane': 'Mary'}) 0 Chris1 Mary2 JohnName: first, dtype: object","link":"/blog/2022/10/10/Python-c06-udpate-data/"},{"title":"Terraform-a01-Introduction","text":"What is TerraformTerraform is a tool for building, changing, and versioning infrastructure safely and efficiently.It is open source and declarative The differences between declarative and imperative: declarative: define WHAT the result you want imperative: define exact steps - HOW The key features: Infrastructure as Code Execution Plan Resource Graph Change Automation A. Previsioning infrastructure: private network space ec2 server instances install Docker and other tools security B. Deploy applications Difference between Ansible and TerraformBoth: Infrastructure as a Code AnsibleBetter for configuring that infrastructure Mainly a configuration tool More mature TerraformBetter for infrastructure Mainly infrastructure provisioning tool More advanced in orchestration How does Terraform work create execution plan execute plan with providers Configurationexample: 123456789101112131415161718192021terraform { required_providers { google = { source = \"hashicorp/google\" version = \"3.5.0\" } }}provider \"google\" { credentials = file(\"&lt;NAME&gt;.json\") project = \"&lt;PROJECT_ID&gt;\" region = \"us-central1\" zone = \"us-central1-c\"}resource \"google_compute_network\" \"vpc_network\" { name = \"terraform-network\"} Terraform Blockit defines which provider to download from Terraform Registry ProviderIt is used to configure the named provider ResourceIt contains the resource type, and the resource name. resource ID: resource type and resource name together Commandsrefresh: query provider to get the current state plan: create an execution plan apply: execute the plan destroy: destroy the resources/infrastructure","link":"/blog/2021/01/19/Terraform-a01-Introduction/"},{"title":"a01-GCP-introduction","text":"What is GCP ?GCP stands for Google Cloud Platform which is a suite of public cloud computing services offered by Google. It offers 4 main kinds of services: compute, storage, big data, machine learning that run on Google hardware. what is cloud computing ? On-demand self-service: use interface to get processing, no human intervention needed Broad network access: access from anywhere Resource pooling: provider shares resources to customers Rapid elasticity: get more resources quickly as needed Measured service: pay only for what you consume compute evolution Physical/colo: user-configured, managed and maintained Virtualized: user-configured; provider-managed and maintained Serverless: container based architecture, fully automated gcp computing architectures IaaS: Infrastructure as a Service provides raw compute, storage and network organized in ways that are like from data centers PaaS: Platform as a Service provides a platform allowing customers to develop, run and manage applications without maintaining infrastructure SaaS: Software as a Service software is licensed on a subscription basis and is centrally hosted regions and zonesGCP is organized into regions and zones. Zone is department area for GCP resources. For example, the compute engine runs in a zone specified. Locations within regions usually have network latencies of under 5 milliseconds As of building a fault tolerant application, you can spread their resources across multiple regions open apisGCP services are compatible with open sources products. for example: Cloud Bigtable &lt;==&gt; Apache HBase Cloud Dataproc &lt;==&gt; Hadoop gcp servicesGCP offers services as compute, storage, big data and machine learning budgets and billingGCP provides 4 tools to help: budgets and alert: define budget per billing or per project, you can create an alert at 50 percent, 90 percent and 100 percent billing: you have billing account on GCP project export: store detailed billing information reports and quotas: report is a visual tool to monitor your expenditure. quotas are designed to prevent over-consumption of resources rate quotas reset after a specific time. eg: Kubernetes service set a quota of 1000 calls per 100 seconds allocation quotas govern the number of resources you can have in your projects. eg: no more than 5 VPN per project","link":"/blog/2020/05/01/a01-GCP-introduction/"},{"title":"a02-Getting-Started-With-GCP","text":"IAMIAM: Google Cloud’s Identity and Access Management.It has 3 parts: Who: can be defined by google account, google group, service account Can do what: can be defined by an IAM role which is a collection of permissions There are 3 kinds of roles: Primitive role Predefined role Custom role: can only be defined in organization or project, but not in folders On which resource GCP resource hierarchypolices can define in organization, folder, project, they are inherited in the hierarchy. Projects are the main way you organise your gcp resources. Each project has Project ID: immutable (assigned by you) Project Name: mutable (assigned by you) Project number: immutable (assigned by GCP) Policies defined in organisation level can be inherited to all children. GCP use least privilege in managing any kind of compute infrastructure. The policies implemented at a higher level in this hierarchy can’t take away access that’s granted at a lower levelEg: if you grant Editor role to Organisation and Viewer role to the folder, then the folder is granted the Editor role. Projects can have different owners and users - they are built separately and managed separately. Service AccountFor example: If you want to give permissions to a Compute Engine rather than a person, you would use service account.A service account is also a resource, so you can give a role to it. There are 4 ways to interact with GCP’s management layer: GCP console Manage and create projects Access to GCP APIs Offers access to Cloud Shell Cloud shell and Cloud SDK Includes command line tools: gcloud, gsutil(Cloud storage), bq(BigQuery) API Enabled through GCP console APIs Explorer is an interface tool that let you easily try GCP APIs using a browser Use libraries within your code Cloud Client Libraries(Latest and recommended libraries) Google API Client Libraries Cloud Console Mobile App When using GCP, it handles most of the lower security layer, the upper layers remain the customer’s responsibility Cloud MarketPlace( formerly Cloud Launcher)It’s a tool for quickly deploying functional software packages on GCP","link":"/blog/2020/05/03/a02-Getting-Started-With-GCP/"},{"title":"a03-GCP-Virtual-Machines","text":"We can run virtual machines by using of Compute Engine VPC NetworkVirtual Private Cloud: it connects your GCP resources to each other and to the internet. Google Cloud VPC networks are global, but the subnets are regional In the example below, us-east1-b and us-east1-c are on the same subnet but in different zones VPCs have routing tables, you can define firewall rules in terms of tags on compute engine. VPC Peering: establish a peering relationship between projectsShared VPC: you can use IAM to control Cloud Load BalancingUsers get a single, global anycast IP address Cloud CDN(Content Delivery Network)Use Google’s globally distributed edge caches to cache content close to your users Compute EngineCreate virtual machine by using of: GCP Console gcloud You can run images of linux or windows servers. You can configure memories and cpus of each VM, you can choose 2 kinds of storage: standard or SSD You can choose a Preemptible VM to save money (the instance will terminate after 24 hours, it can be used for applicationsdistribute processes across multiple instances in a cluster or for test) Scale up: use big VMs for memory and compute-intensive applications Scale out: Use Autoscaling for resilient, scalable applications","link":"/blog/2020/05/06/a03-GCP-Virtual-Machines/"},{"title":"a04-GCP-Storage","text":"Cloud StorageIt is binary large-object storage(you have a storage and have a unique key to access) which is not the same asfile storage(you manage your data as a hierarchy of folders) orblock storage(the operating system manage data as chunks of disk) Cloud storage works well with web technologies and is scalable Each of objects in Cloud Storage has a URL and is immutable Usage: serving website content storing data for archival and disaster recovery distributing large data objects to your end users via Direct Download For most case, IAM is sufficient, but if you need finer control, you can create ACLs(access control lists).Each ACL consists of: scope: a user or group permission: read or write Object VersioningCloud Storage keeps a history of modification, you can list the archived versions of an object, restore or delete it It is not available on cloud console, you can change it via the command lineNB: after enabling of versioning, adding several versions of the object, when disable the versioning, the different versionsalways exist in the bucket, you should delete them manually. lifecycleCloud Storage offers lifecycle management policies, eg: you could delete objects older than 5 days Cloud Storage has different types of storage classes: Multi-Regional, Regional, Nearline, Coldline 3 Ways to bring data into Cloud Storage: Online Transfer Storage Transfer Service (online) Transfer Appliance (offline) Cloud BigtableIt is google’s NoSQL, big data database service. It supports high throughput, both read and write. It offers same API as HBase(native database for Apache Hadoop), differences: Bigtable can scale and manage fast and easily Bigtable encrypts data in-flight and at rest Bigtable can be controlled access with IAM Bigtable drives major applications such as Google Analytics, Gmail Bigtable access patterns: application api streaming batch processing Cloud SQLmanaged RDBMS MySQL and PostgreSQL databases Automatic replication Managed backups Vertical scaling(read and write) Horizontal scaling(read) Google security Cloud Spannerhorizontally scalable RDBMS Strong global consistency High availability SQL queries Automatic replication Cloud Datastorehorizontally scalable NoSQL DB Designed for application backend Supports transactions includes a free daily quota Cloud Storage Comparing","link":"/blog/2020/05/06/a04-GCP-Storage/"},{"title":"a05-GCP-Containers","text":"Kubernetesorchestrator for containers so you can better manage and scale your applications Kubernetes EngineKubernetes as a managed service in the cloud. You can create Kubernetes Cluster with Kubernetes Engine Clusteris a set of master components that control the system as a whole and a set of nodes that run containersIn Kubernetes, a node represents a computing instanceIn GCP, a node is VM running in Compute Engine Podthe smallest deployable unit in Kubernetes. It has 1 container often, but it could have multiple containers, where the containerswill share the networking and have the same disk storage volume Deploymenta deployment represents a group a replicas of the same pod. It keeps your pods running even if a node fails Serviceis a fundamental way Kubernetes represents load balancing. It has a public IP so the external can access the cluster In GKE, this kind of load balancer is a network load balancer AnthosHybrid and Multi-Cloud distributed systems and service management from Google. It rests on Kubernetes and Kubernetes Engine deployed on-premise","link":"/blog/2020/05/08/a05-GCP-Containers/"},{"title":"a06-GCP-Applications","text":"App Engineis a PaaS for building scalable applications it makes deployment, maintenance and scalability easy suited for building scalable web applications and mobile backends It offers 2 environments: standard environment easily deploy applications autoscale free daily quota usage based pricing Specific versions of Java, Python, PHP and Go are supported Sandbox constraints: No writing to local files All requests time out at 60s Limits on third-party software flexible environment Build and deploy containerized apps with a click No sandbox constraints Can access App Engine resources Comparing standard and flexible environments Comparing Kubernetes Engine and App Engine GCP provides 2 API management tools Cloud Endpoints Control access and validate calls with JSON Web Token and Google API keys Identify web, mobile users with Auth0 and Firebase Authentication Generate client libraries Apigee Edge A platform for making APIs available to your customers and partners Contains analytics, monetization, and a developer portalThe backend services for Apigee need not to be in GCP","link":"/blog/2020/05/08/a06-GCP-Applications/"},{"title":"a07-GCP Developing, Deploying and Monitoring","text":"Cloud Source RepositoriesFully featured Git repositories hosted on GCP Cloud Functions Create single-purpose functions that respond to events without a server or runtime Written in Js, execute in managed node.js environment on GCP Deployment Manager Provides repeatable deployments Create a .yaml template describing your environment and use Deployment Manager to create resources Stackdriveris GCP’s tool for monitoring, logging and diagnostics","link":"/blog/2020/05/08/a07-GCP-Developing-Deploying-and-Monitoring/"},{"title":"a08-GCP Big Data and Machine Learning","text":"Big Data Serverless means you don’t have to worry about provisioning compute instances to run your jobs. the services are fully managed. Cloud Dataprocis managed Hadoop Fast, easy, managed way to run Hadoop, Spark/Hive/Pig on GCP Create clusters in 90 seconds Scale clusters up and down even when jobs are running Easily migrate on-premises Hadoop jobs to the cloud Save money with preemptible instances Cloud Dataflowis managed data pipelines Processes data using Compute Engine Clusters are sized for you Automated scaling Write code for batch and streaming Why use Cloud Dataflow? ETL Data analytics: batch or streaming Orchestration: create pipelines that coordinate services, including external services Integrates with GCP services Big Queryis managed data warehouse It provides near real-time interactive analysis of massive dataset using SQL No cluster maintenance Compute and Storage are separated with a terabit network in between You only pay for storage and processing used Automatic discount for long-term data storage(when data reaches 90 days in BigQuery, google drops the price of storage) Cloud Pub/Subis scalable, reliable messaging Supports many-to-many asynchronous messaging Push/pull to topics Support for offline consumers At least once delivery policy Cloud Datalabinteractive data exploration(Notebook) Built on Jupyter(formerly IPython) Easily deploy models to BigQuery. You can visualize data with Google Charts or map plot line Cloud Machine Learning Platform TensorFlow Cloud ML Machine Learning APIs Why use CLoud Machine Learning Platform? For structured data Classification and regression Recommendation Anomaly detection For unstructured data Image and video analytics Text analytics CLoud Vision API Gain insight from images Detect inappropriate content Analyze sentiment Extract text Cloud Natural Language API can return text in real time Highly accurate, even in noisy environments Access from any device Cloud Translation API Translate strings Programmatically detect a document’s language Support for dozen’s languages Cloud Video Intelligence API Annotate the contents of video Detect scene changes Flag inappropriate content Support for a variety of video formats","link":"/blog/2020/05/09/a08-GCP-Big-Data-and-Machine-Learning/"},{"title":"b01-Fundamental-Concepts","text":"Database TypesRelational database SQL ACID ( Atomicity, Consistency, Isolation, Durability) Transactional Examples Mysql, Microsoft SQL Server, Oracle, PostgreSQL Pros Standard, consistent, reliable, data integrity Cons Poor scaling, not fast, not good for semi-structured data “Consistency and Reliability over Performance” Non-Relational Database Non-structured Some have ACID (Datastore) Examples Redis, MongoDB, Cassandra, HBase, Bigtable, RavenDB Pros Scalable, High Performance, Not Structure-Limited Cons Consistency, Data Integrity “Performance over Consistency” How to choose the right storage","link":"/blog/2020/05/11/b01-Fundamental-Concepts/"},{"title":"b02-Cloud-SQL","text":"Cloud SQL Max disk size 10 TB If need &gt; 10 TB, then choose Cloud Spanner Read replicas limited to same region as master Cloud SQL hands on","link":"/blog/2020/05/14/b02-Cloud-SQL/"},{"title":"b03-Cloud-Datastore","text":"What is a Cloud Datastore NoSQL Flexible structure/relationship No Ops No provisioning of instances Compute layer is abstracted away Scalable Multi-regions access Sharding/replication automatic We can have only 1 Datastore per project When to use Datastore Applications need scale Product catalog - real time inventory User profiles - mobile apps Game save states ACID transactions, eg, transferring funds When not use Datastore Analytics(full SQL semantics) Use Big Query/Cloud Spanner Extreme scale(10M+ read/writes per second) Use Bigtable Don’t need ACID Bigtable Lift and shift(existing MYSQL) Cloud SQL Near zero latency(&lt; 10ms) Use in-memory database (Redis) Relational Database vs DatastoreEntities can be hierarchical Queries and IndexingQuery retrieve entity from datastore query methods programmatic web console GQL( google query language) Indexing queries get results from indexes index type Built-in: Allows single property queries Composite: use index.yaml Danger - Exploding Indexes ! solutions: use index.yaml to narrow index scope do not index properties that don’t need indexing Data ConsistencyPerformance vs Accuracy Strongly Consistent Parallel processes with orders guaranteed Use case: financial transaction Eventually Consistent Parallel processes not with orders guaranteed Use case: Census population, order not important","link":"/blog/2020/05/16/b03-Cloud-Datastore/"},{"title":"b04-Bigtable","text":"Cloud Bigtable High performance, massively scalable NoSQL Ideal for large analytical workloads Bigtable infrastructure Front-end server pool serves requests to nodes Compute and Storage are separate, No data is stored on the node except for metadata to direct requests to the correct tablet tables are shards into tablets. They are stored on Colossus, google’s filesystem. as storage is separate from compute node,replication and recovery of node data is very fast, as only metadata/pointers need to be updated instancesEntire bigtable project called ‘instance’ clusterNodes grouped into clusters 1 or more cluster per instance instance type Development - low cost, single node, on replication Production - 3+ nodes per cluster, replications available Schema Design Per table - Row key is only indexed item Hands oninstall cbt in Google Cloud SDK12gcloud components updateglcoud components install cbt set env variable1echo -e \"project=[PROJECT_ID]\\ninstance=[INSTANCE_ID]\"&gt;~/.cbtrc create table1cbt createtable my-table list table1cbt ls add column family1cbt createfamily my-table cf1 list column family1cbt ls my-table add value to row1, column family cf1, column qualifier c11cbt set my-table r1 cf1:c1=testvalue read table1cbt read my-table delete table1cbt deletetable my-table","link":"/blog/2020/05/19/b04-Bigtable/"},{"title":"b05-Cloud-Spanner","text":"Cloud Spanner Fully managed, highly scalable/available, relational database Similar architecture to Bigtable What is it used for? A relational database that need strong transactional consistency(ACID) Wide scale Higher workload than Cloud SQL Standard SQL format Spanner vs CLoud SQL Cloud SQL = MySQL Spanner is not “dropped in” replacement for MySQL Not MySQL/PostgreSQL compatible Work need to migrate Spanner architecture Nodes handle computation, each node serves up to 2 TB of storage Storage is replicated across zones, compute and storage are separated Replication is automatic","link":"/blog/2020/05/20/b05-Cloud-Spanner/"},{"title":"b06-01-Cloud-PubSub-HelloWorld","text":"In this article I will show you how to publish and receive messages in PubSub with Java create topic 1gcloud pubsub topics create my-topic create subscription to this topic 1gcloud pubsub subscriptions create my-sub --topic my-topic git clone project into cloud shell 1git clone https://github.com/googleapis/java-pubsub.git go into the sample 1cd samples/snippets/ modify PublisherExample.java and SubscribeAsyncExample.java to put the right project id, topic id and subscription id compile project 1mvn clean install -DskipTests run subscriber 1mvn exec:java -Dexec.mainClass=\"pubsub.SubscribeAsyncExample\" run publisher in another screen and observe subscriber 1mvn exec:java -Dexec.mainClass=\"pubsub.PublisherExample\"","link":"/blog/2020/10/02/b06-01-Cloud-PubSub-HelloWorld/"},{"title":"b06-Cloud-PubSub","text":"Cloud Pub/Sub Global scale messaging buffer/coupler No-ops Decouples senders and receivers Equivalent to Kafka At-least-once delivery Pub/Sub Core Concepts Topic: A named resource to which messages are sent by publishers Subscription: A named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application. Message: The combination of data and (optional) attributes that a publisher sends to a topic and is eventually delivered to subscribers. Message attribute: A key-value pair that a publisher can define Pub/Sub Message flow Publisher sends messages to the topic Messages are stored in message store until they are delivered and acknowledged by subscribers Pub/Sub forwards messages from a topic to subscribers. messages can be pushed by Pub/Sub to subscriber or pulled by subscribers from Pub/Sub Subscriber receives pending messages from subscription and acknowledge to Pub/Sub After message is acknowledged by the subscriber, it is removed from the subscription’s queue of messages. Basic flow of messages Message flow Messages A, B are sent to the topic.There are 2 subscriptions, Subscriber1 and Subscriber2 are subscribed to Subscription1 and each one got one message.Subscriber3 is subscribed to Subscription2, and it got both message A and B Publishing Message format Message data Ordering Key Attributes Using Schema Avro Protocol Buffer ReceivingSubscriber At Least Once delivery Retention durationMessages stored in PubSub10 minutes -&gt; 7 days Ack DeadlineMessages to be deleted if not be consumed10 seconds (by default) Expiration periodSubscription to be deleted if no messages arrive31 days be (by default) Delivery mode Push = lower latency, more real-time Push subscribers must be Webhook endpoints that accept POST over HTTPS Pull ideal for large volume of messages - batch delivery ReplayingSeeking to a timestamp retain_acked_messages set to True messagesRetentionDuration7 days by default Seeking to a snapshot define e snapshot, messages to replay are those who have not been consumed when creating of thesnapshot and the new ones.","link":"/blog/2020/05/23/b06-Cloud-PubSub/"},{"title":"b07-Cloud Dataflow","text":"Data Processing Solution:Apache Beam + Cloud Dataflow Cloud Dataflow Auto scaling, No-Ops, Stream and Batch Processing Built on Apache Beam Pipelines are regional-based Data Transformation Cloud Dataproc vs Cloud Dataflow Key Terms Element : single entry of data (eg. table row) PCollection: Distributed data set, input and output Transform: Data processing in pipeline ParDo: Type of Transform","link":"/blog/2020/05/23/b07-Cloud-Dataflow/"},{"title":"b08-Cloud Dataproc","text":"Dataproc Hadoop, Spark, Hive, Pig Lift and shift to GCP Map Reduce Converting from HDFS to Google Cloud Storage Copy data to GCS Install connector or copy manually Update file prefix in scripts From hdfs:// to gs:// Use Dataproc and run against/output to GCS Dataproc performance optimization Keep your data close to your cluster Place Dataproc cluster in same region as storage bucket Larger persistent disk = better performance Using SSD over HDD Allocate more VMs Use preemptible VM to save on costs","link":"/blog/2020/06/05/b08-Cloud-Dataproc/"},{"title":"b09-01-BigQuery Load From Json","text":"How to copy dataset between different projects in BigQuery ?1. BigQuery Data Transfer Service.This is the simplest solution and with it, we can copy a dataset within a region or from one region to another, without extracting, moving, and reloading data into BigQuery 2. Copy manuallyIf our BigQuery Data Transfer Service is not active, we can use another way to copy the table.The steps are as following: 1.","link":"/blog/2021/03/26/b09-01-BigQuery-Load-From-Json/"},{"title":"b09-BigQuery","text":"What is BigQuery ? Fully Managed Data warehousing Near real time analysis of petabyte scale databases Serverless(no ops) Auto scaling Both storage and analysis Interact with SQL How BigQuery works Columnar data store It does not update exciting records No transactional Structure Dataset: contains tables/views Table: collections of columns Job: long running action/query IAM can control by project, dataset, view cannot control at table level","link":"/blog/2020/06/12/b09-BigQuery/"},{"title":"b10-Machine Learning","text":"What is Machine Learning ?Process of combining inputs to produce useful predictions How it works Train a model with examples(example = input + label) Training = adjust model to learn relationship between features and labels Feature = input variables Inference = apply trained model to unlabeled examples Learning types Supervised learning Regression - Continuous, numeric variables Classification - categorical variables: yes/no Unsupervised Learning Clustering - finding pattern No labeled or categorized Reinforcement learning Use positive/negative reinforcement to complete a task Complete a maze, learn chess Neural network Neural network - model composed of layers, consisting of neurons Neuron - node, combines input values and create one output value Feature - input variables used to make predictions Hidden layer - set of neurons operating from same input set Feature engineering - deciding which features to use in a model Epoch - single pass through training dataset Deep and Wide in neural network Wide - memorization: many features Deep - generalization: many hidden layers Deep and Wide - both: good for recommendation engines What is Overfitting?training model ‘overfitted’ to training data - unable to generalize with new data Cause of Overfitting Not enough training data Too many features Model fitted to unnecessary features unique to training data: “noise” Solving of Overfitting more data make model less complex remove “noise” increase “regularization” parameters AI platform Fully managed Tensorflow platform Distributed training and predictions Hyperparameter tuning with Hypertune How AI Platform works Master - manages other nodes Workers - works on portion of training job Parameter servers - coordinate shared model state between workers","link":"/blog/2020/06/16/b10-Machine-Learning/"},{"title":"d01-Logs Router","text":"","link":"/blog/2022/09/15/d01-Logs-Router/"},{"title":"d02-Cloud Functions","text":"Functions-frameworkFunctions framework helps in setting up the environment for testing of cloud functions locallyHere is an example installation1pip install functions-framework code example: create a new project and install functions-framework as above, and then create a new python file main.py 123456def multiply(request): request_json = request.get_json() num_1 = request_json[\"num_1\"] num_2 = request_json[\"num_2\"] result = num_1 * num_2 return (f\"The multiplication result is {result}\", 200) run the function on local: 1functions-framework --port 8080 --target multiply --signature-type http --source main.py --debug Test the functionuse another terminal and enter the curl command: 12345curl -X POST \\-H \"Content-type:application/json\" \\-d '{\"num_1\":20, \"num_2\": 30}' \\-w '\\n' \\http://localhost:8080 Response in this new terminal:","link":"/blog/2022/12/21/d02-Cloud-Functions/"},{"title":"gcp-c01-vpc","text":"4 ways to interact with GCP Projects and networksProject Associate objects and services with billing Contain networks(5 by default) that can be shared/peered Network Has no IP address range Is global and spans all available regions Contains subnetworks Is available as default, auto or custom 3 VPC network types The projects can communicate over internal IPs when they are in the same network even though they are in different regions.They can not communicate over internal IPs when they are in different networks even though they are in the same region Subnetworks cross zones VMs can be on the same subnet but in different zones A single firewall rule can apply to both VMs Expand subnets Cannot overlap with other subnets Can expand but not shrink Avoid large subnets Internal and External Ip address Every VM need an internal ip address but the external ip address is optional and by default it is ephemeral","link":"/blog/2021/05/28/gcp-c01-vpc/"},{"title":"spark cross join","text":"//todo: to complete Cross join matches every row from left with every row from right, generating a Cartesian cross product. val joinDF=statesPopulationDF.crossJoin(statesTaxRatesDF) without using a join condition.","link":"/blog/2020/05/06/spark-cross-join/"},{"title":"Website Recommended","text":"Share a website which you can view headlines of major French media in real time changes in the epidemic markets, food delivery shops, drug stores, and banks that are open during the epidemic some very useful links, you can enjoy online concerts for free, visit online museums some rumor information, etc. highly recommended http://daccfrance.com/","link":"/blog/2022/09/16/xiaomakuaibao/"},{"title":"spark listeners","text":"When running spark job, driver collects logs from different executors and send events via an event bus to Web UI and to EventLog Listener simultaneously. EventLog Listener send events to a some directory for example in hdfs to store the events, and then spark history server will expose these events in its interface. We could define our custom EventLog Listener, there are several listeners already developed and we can use them directly, here I will prent 3 examples. sparklensSparklens is a profiling tool for Spark with built-in Spark Scheduler simulator, it reports Estimated completion time and estimated cluster utilisation with different number of executors Job/Stage timeline which shows how the parallel stages were scheduled within a job. This makes it easy to visualise the DAG with stage dependencies at the job level. Here is a screen capture of sparklens reporting ( in my example, I added sparklens jar in the classpath of zepplin, and import sparklens package, and then I can use sparklens directly) import package 123import com.qubole.sparklens.QuboleNotebookListenerval QNL = new QuboleNotebookListener(sc.getConf)sc.addSparkListener(QNL) sparklintSparklint is a profiling tool for Spark with advance metrics and better visualization about your spark application’s resource utilization. It helps you find out where the bottle neck are We can use it in the application code, or we can also use it to analyse event logs, at the moment when I write this blog, the actual version of sparklint is 1.0.13, and we can’t analyse event logs of history server yet if it is compressed in the configuration.But we can decompress it to json file and then we can work on it. here is a screen capture of sparklint sparkMeasuresparkMeasure is a tool for performance troubleshooting of Apache Spark workloads, It simplifies the collection and analysis of Spark performance metrics. It is a tool for multiple uses: instrument interactive (notebooks) and batch workloads","link":"/blog/2019/05/17/spark-listeners/"},{"title":"spark skewness","text":"Here we have an example of key salting to resolve the problem of skewness in spark. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import org.apache.spark.SparkConfimport org.apache.spark.sql.{DataFrame, SparkSession}import org.apache.spark.sql.functions._object SparkSkewnessExample extends App { val conf = new SparkConf() .setMaster(\"local[*]\") .setAppName(\"SparkSkewnessExample\") val spark = SparkSession .builder() .config(conf) .getOrCreate() import spark.implicits._ // DataFrame 1 val df1 = Seq( (\"a\", \"12\"), (\"a\", \"31\"), (\"a\", \"24\"), (\"a\", \"0\"), (\"a\", \"24\"), (\"b\", \"45\"), (\"c\", \"24\") ).toDF(\"id\", \"value\") df1.show(10,false) //DataFrame2 val df2 = Seq( (\"a\", \"45\"), (\"b\", \"575\"), (\"c\", \"54\") ).toDF(\"id\", \"value\") df2.show(10,false) // eliminate skewness def eliminateSkewness(leftDf: DataFrame, leftCol: String, rightDf: DataFrame) = { val df1 = leftDf .withColumn(leftCol, concat( leftDf.col(leftCol), lit(\"_\"), lit(floor(rand(123456) * 10)))) val df2 = rightDf .withColumn(\"saltCol\", explode( array((0 to 10).map(lit(_)): _ *) )) (df1, df2) } val (df3, df4) = eliminateSkewness(df1, \"id\", df2) df3.show(100, false) df4.show(100, false) //join after eliminating data skewness df3.join( df4, df3.col(\"id\") &lt;=&gt; concat(df4.col(\"id\"), lit(\"_\"), df4.col(\"saltCol\")) ).drop(\"saltCol\") .show(100,false)}","link":"/blog/2020/08/06/spark-skewness/"}],"tags":[{"name":"spark","slug":"spark","link":"/blog/tags/spark/"}],"categories":[{"name":"gcp","slug":"gcp","link":"/blog/categories/gcp/"},{"name":"feelings","slug":"feelings","link":"/blog/categories/feelings/"},{"name":"git","slug":"git","link":"/blog/categories/git/"},{"name":"big data","slug":"big-data","link":"/blog/categories/big-data/"},{"name":"kubernetes","slug":"gcp/kubernetes","link":"/blog/categories/gcp/kubernetes/"},{"name":"ci/cd","slug":"ci-cd","link":"/blog/categories/ci-cd/"},{"name":"devops","slug":"devops","link":"/blog/categories/devops/"},{"name":"commands","slug":"git/commands","link":"/blog/categories/git/commands/"},{"name":"python","slug":"python","link":"/blog/categories/python/"},{"name":"kubernetes","slug":"devops/kubernetes","link":"/blog/categories/devops/kubernetes/"},{"name":"c-pandas","slug":"python/c-pandas","link":"/blog/categories/python/c-pandas/"},{"name":"a-basics","slug":"python/a-basics","link":"/blog/categories/python/a-basics/"},{"name":"terraform","slug":"devops/terraform","link":"/blog/categories/devops/terraform/"},{"name":"a-core-infrastructure","slug":"gcp/a-core-infrastructure","link":"/blog/categories/gcp/a-core-infrastructure/"},{"name":"b-data-engineer","slug":"gcp/b-data-engineer","link":"/blog/categories/gcp/b-data-engineer/"},{"name":"b-OOP","slug":"python/b-OOP","link":"/blog/categories/python/b-OOP/"},{"name":"d-practice","slug":"gcp/d-practice","link":"/blog/categories/gcp/d-practice/"},{"name":"c-data-architect","slug":"gcp/c-data-architect","link":"/blog/categories/gcp/c-data-architect/"},{"name":"spark","slug":"spark","link":"/blog/categories/spark/"},{"name":"infrastructure-foundation","slug":"gcp/c-data-architect/infrastructure-foundation","link":"/blog/categories/gcp/c-data-architect/infrastructure-foundation/"}]}